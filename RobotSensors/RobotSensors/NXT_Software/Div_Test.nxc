#include "robotSensors.nxc"

void microphoneTest(){
	unsigned int noiseLevel;
	microphoneNoiseLevel(noiseLevel);
	TextOut(0,LCD_LINE1,"          ");
	NumOut(0,LCD_LINE1,noiseLevel);
}

void brightnessTest(){
	unsigned int brightness;
	long timestamp;
	
	brightnessRead(brightness, timestamp);
	TextOut(0,LCD_LINE1,"          ");
	TextOut(0,LCD_LINE4,"          ");
	NumOut(0,LCD_LINE1,brightness);
	NumOut(0,LCD_LINE4,timestamp);
}

void timeTest(){
	int year;
	unsigned byte month, dayOfWeek, day, hour, minute, second;
	unsigned int millis;
	unsigned long time = CurrentTick();
	timeRead(year, month, day, dayOfWeek, hour, minute, second, millis);
	ClearScreen();
	NumOut(0,LCD_LINE1,year);
	NumOut(0,LCD_LINE2,month+1);
	NumOut(0,LCD_LINE3,day);
	
	string text;
	switch(dayOfWeek){
		case(SUNDAY):    text = "SUNDAY";    break;
		case(MONDAY):    text = "MONDAY";    break;
		case(TUESDAY):   text = "TUESDAY";   break;
		case(WEDNESDAY): text = "WEDNESDAY"; break;
		case(THURSDAY):  text = "THURSDAY";  break;
		case(FRIDAY):    text = "FRIDAY";    break;
		case(SATURDAY):  text = "SATURDAY";  break;	
	}
	TextOut(0,LCD_LINE4,text);
	
	NumOut(0,LCD_LINE5,hour);
	NumOut(0,LCD_LINE6,minute);
	NumOut(0,LCD_LINE7,second);
	NumOut(0,LCD_LINE8,millis);
	
	time = CurrentTick() - time;
	//TextOut(50,LCD_LINE1,"    ");
	NumOut(50,LCD_LINE1,time);	
}

void brightestPointTest(){
	unsigned int width, height, brightestX, brightestY, intensity, dummy;
	cameraStart(BACK);
	//NumOut(0,LCD_LINE1,1);
	cameraRead(0, dummy, dummy);
	//NumOut(0,LCD_LINE1,2);
	pictureAccuBrightestPoint(0, width, height, brightestX, brightestY, intensity);
	//NumOut(0,LCD_LINE1,3);
	pictureAccuShow(0);
}

void darkestPointTest(){
	unsigned int width, height, darkestX, darkestY, intensity, dummy;
	int pwrB, pwrA;
	cameraStart(BACK);
	cameraLightOn();
	//cameraRead(0, dummy, dummy);
	//pictureAccuCut(0,300,0,0,450); 
	//pictureAccuDarkestPoint(0, width, height, darkestX, darkestY, intensity);
	//pictureAccuShow(0);
	if(darkestX > width/2){
		TextOut(0,LCD_LINE1,"links ");
		pwrA = 10;
		pwrB = 0;	
	}else{
		TextOut(0,LCD_LINE1,"rechts");
		pwrA = 0;
		pwrB = 10;
	}
	
	pwrA += 12;
	pwrB += 12;
	OnFwd(OUT_A, pwrB);
    OnFwd(OUT_B, pwrA);
	cameraLightOff();	
}

void meanColorTest(){
	int redBall[] ={110,60,45};
	int blueBall[]={30,45,120};
	unsigned byte r,g,b;
	unsigned int dummy;
	cameraStart(BACK);
	cameraLightOn();
	cameraRead(0, dummy, dummy);
	pictureAccuMeanColor(0,r,g,b);
	ClearScreen();
	NumOut(0,LCD_LINE1,r);
	NumOut(0,LCD_LINE2,g);
	NumOut(0,LCD_LINE3,b);
	
	int dr = (redBall[0]-r)*(redBall[0]-r)  + (redBall[1]-g)*(redBall[1]-g)  + (redBall[2]-b)*(redBall[2]-b);
	int db = (blueBall[0]-r)*(blueBall[0]-r) + (blueBall[1]-g)*(blueBall[1]-g) + (blueBall[2]-b)*(blueBall[2]-b);
	
	if(dr < db){
		TextOut(0,LCD_LINE4,"Red");
	}else{
		TextOut(0,LCD_LINE4,"Blue");	
	}	
}

void cutTest(){
	unsigned int dummy, width, height, darkestX, darkestY;
	float intensity;
	cameraStart(BACK);
	cameraLightOn();
	cameraRead(0, dummy, dummy);
	pictureAccuShow(0);
	Wait(500);
	pictureAccuCut(0,100,100,400,0);
	pictureAccuDarkestPoint(0, width, height, darkestX, darkestY, intensity);                                
	pictureAccuShow(0);
	Wait(2000);
}

void gyroscopeTest(){
	int wX,wY,wZ;
	unsigned long timestamp;//, timestampOld;
	
	int status = gyroscopeRead(wX, wY, wZ, timestamp);
	ClearScreen();
	NumOut(0,LCD_LINE1,wX);
	NumOut(0,LCD_LINE2,wY);
	NumOut(0,LCD_LINE3,wZ);
	NumOut(0,LCD_LINE4,timestamp);
	NumOut(0,LCD_LINE5,status);
	//unsigned long time = timestamp - timestampOld;
	//NumOut(0,LCD_LINE5,time);
	//timestampOld = timestamp;
	//Wait(100);
}


void gyroscopeReadFastTest(){
	int wX,wY,wZ;
	unsigned long timestamp;
	int status;
	//do{
		status = gyroscopeReadFast(wX, wY, wZ, timestamp);
	//}while(timestampOld == timestamp);
	ClearScreen();
	NumOut(0,LCD_LINE1,wX);
	NumOut(0,LCD_LINE2,wY);
	NumOut(0,LCD_LINE3,wZ);
	NumOut(0,LCD_LINE4,timestamp);
	NumOut(0,LCD_LINE5,status);
	
}




task main(){
//////
	CommBTConnectionType args;
	args.Action = true;
	args.Name = "HTC ONE S";
	args.ConnectionSlot = 1;
	int cnt=0;
	/*while(BluetoothStatus(CONN_BT1)!=NO_ERR){
		NumOut(0,LCD_LINE1,cnt);
		cnt++;
	}*/
	SysCommBTConnection (args)
	

	cnt=0;
	while(BluetoothStatus(CONN_BT1)!=NO_ERR){
		NumOut(0,LCD_LINE1,cnt);
		cnt++;
	}
	Wait(3000);
//////

	ClearScreen();
	//gyroscopeStartReadFast();
	unsigned long time,oldTime,maxTime=0,span,meanTime;
	meanTime = 0;
	TextOut(50,LCD_LINE8,"endlos schleife gestartet");
	Wait(1000);
	while(true){
		time = CurrentTick();
		//brightnessTest();
		//microphoneTest();
		//timeTest();
		//meanColorTest();
		darkestPointTest();
		//brightestPointTest();	
		//cutTest();
		//gyroscopeTest();
//		gyroscopeReadFastTest();
		span = time - oldTime;
		//ClearScreen();
		NumOut(50,LCD_LINE6,span);
		oldTime = time;
		if(span > maxTime){
			maxTime = span;
		}
		NumOut(70,LCD_LINE6,maxTime);
		cnt++;
		meanTime += span;
		NumOut(50,LCD_LINE7,meanTime/cnt);
		if(cnt>20){
			maxTime = 0;
			cnt = 0;
			meanTime=0;
		}
		
	}
}
